import pandas as pd
import numpy as np
import sys

USER_PATH = '/Users/marcozanchi/Work/Grade/'
LIB_PATH = USER_PATH + 'microclima/lib/'
sys.path.append(LIB_PATH + 'physical_model')
from microclimate import Microclimate



def compute_microclimate_data_on_sensors_location(df_Climate, df_sensors,
                                                  date_dict, lat, long,
                                                  dsm, resolution, slope, aspect, ha, svf,study_area_coordinates
                                                 ):
                                                     
    '''
    The purpose of this method is to calculate the physical variables generated by the physical model for each sensor location. These calculations are performed specifically for the time period during which temperature and humidity data have been measured by the sensors. The resulting physical variables will then be utilized as input to train a neural network, enabling it to learn the underlying physical relationships between temperature, humidity, and the associated variables. 
    Inputs:
     - df_Climate (pd.DataFrame): The Pandas DataFrame containing the global climate data from ERA5 database or ARPA station
     - df_sensors (pd.DataFrame): The Pandas DataFrame containing the temperature and humidity data collected by the sensors
     - date_dict (dictionary): The dictionary containing the period of interest
     - lat (float): The latitute of the center of the study area in decimal degrees. 
     - long (float): The latitute of the center of the study area in decimal degrees. 
     - dsm (np.ndarray): The digital surface model, represented as a 2D numpy matrix with elevation in each point.
     - resolution (float): The DSM resolution scale.
     - slope (np.ndarray): The slope of the DSM, represented as a 2D numpy matrix with the slope of each point.
     - aspect (np.ndarray): The aspect of the DSM, represented as a 2D numpy matrix with the aspect of each point.
     - ha (np.ndarray): The mean horizon angle.
     - svf (np.ndarray): The sky view factor.
     - study_area_coordinates (list): The coordinates of the study area.
    Outputs:
     - df_microclimate_data_generation (pd.DataFrame): The Pandas DataFrame containing for each hour of the period of interest the climate data modelled by the Microclimate class on the sensors location togheter with the actual data measured by the sensors. This dataframe will represent the dataset for the neural networks training and testing.
    '''
    metadata_listdict = []                                                 
    for period in date_dict.values():
            
        year = period[0]
        month = period[1]
        start_day = period[2][0]
        end_day = period[2][1]
        days =  np.arange(start_day,end_day,1)
        
        hours = np.arange(0,24,1)
        
        for day in days:
            for hour in hours:

                #print('Year: ',year, 'Month: ',month, 'Day: ', day, 'Hour: ', hour)
                df_Climate_micro = df_Climate[(df_Climate.Year == year)&(df_Climate.Day == day) & (df_Climate.Hour == hour)&(df_Climate.Month == month)]
                assert len(df_Climate_micro) == 1

                df_sensor_Ref = df_sensors[(df_sensors.Year == year)&(df_sensors.Day == day) & (df_sensors.Hour == hour)&(df_sensors.Month == month)]
                assert len(df_sensor_Ref) == df_sensors.Sensor_id.nunique()
                
                dir =df_Climate_micro['Direct shortwave radiation'].values[0]
                dif = df_Climate_micro['Diffuse shortwave radiation'].values[0]
                
                t_ref = df_Climate_micro['Temperature 1m'].values[0]
                p = df_Climate_micro['Pressure'].values[0]
                tdew =  df_Climate_micro['Dew Temperature 1m'].values[0]
                hs = df_Climate_micro['Specific humidity'].values[0]
                hr_ref = df_Climate_micro['Relative humidity'].values[0] #not used for the microclimate model
                n = df_Climate_micro['Cloud cover'].values[0]
                wind_direction = df_Climate_micro['Wind direction'].values[0]
                wind_speed = df_Climate_micro['Wind speed 1m'].values[0]
                
                alb = 0.25
                albr = 0.25
                
                micro = Microclimate(year = year, month = month, day = day, localtime = hour,
                                          lat = lat, long = long,
                                          dsm = dsm, slope = slope, aspect = aspect, ha = ha, svf = svf,
                                          resolution = resolution, study_area_coordinates = study_area_coordinates,
                                          dir = dir, dif = dif, hs = hs, p = p, n = n, t_ref = t_ref,
                                          wind_speed = wind_speed, wind_direction = wind_direction,
                                          alb = alb, albr = albr)

                for sensor_idx in df_sensors.Sensor_id.unique():

                    df_sensor_spec = df_sensors[df_sensors.Sensor_id == sensor_idx]
                    df_sensor_micro = df_sensor_spec[(df_sensor_spec.Year == year) & (df_sensor_spec.Day == day) & (df_sensor_spec.Hour == hour)&(df_sensor_spec.Month == month)]
                    assert len(df_sensor_micro) == 1

                    Gauss_Boaga_N = df_sensor_spec.Gauss_Boaga_N.values[0]
                    Gauss_Boaga_E = df_sensor_spec.Gauss_Boaga_E.values[0]

                    xllcorner = 1551759 
                    yllcorner = 5060321 

                    row_start = 688 
                    col_start = 770

                    idx_lat = int(((yllcorner+3100*2) - Gauss_Boaga_N)/2)-row_start
                    idx_lon = int (((Gauss_Boaga_E - xllcorner) - col_start*2)/2)

                    shortwave_rad_out = micro.ShortWaveRad[idx_lat, idx_lon]
                    longwave_rad_out = micro.LongWaveRad[idx_lat, idx_lon]
                    wind_out = micro.Wind[idx_lat, idx_lon]
                    Tref_out = micro.Tref[idx_lat, idx_lon]
                    slope_out = micro.Slope[idx_lat, idx_lon]
                    aspect_out = micro.Aspect[idx_lat, idx_lon]
                    altitude_out = micro.Altitude[idx_lat, idx_lon]


                    metadata_dict = {
                                        'Sensor_id': sensor_idx,
                                        'Gauss_Boaga_N': Gauss_Boaga_N,
                                        'Gauss_Boaga_E': Gauss_Boaga_E ,
                                        'Day': day,
                                        'Hour': hour,
                                        'Month': month,
                                        'Year': year,
                                        'Short-wave radiation': shortwave_rad_out,
                                        'Long-wave radiation': longwave_rad_out,
                                        'Wind': wind_out,
                                        'Slope': slope_out,
                                        'Aspect': aspect_out,
                                        'Altitude': altitude_out,
                                        'Precipitation': df_Climate_micro.Precipitation.values[0],
                                        'Pressure': p,
                                        'Cloud-cover': n,
                                        'Specific-humidity':hs,
                                        'H_ref':hr_ref,
                                        'T_ref': Tref_out,
                                        'T_target': df_sensor_micro.Temperature.values[0],
                                        'H_target': df_sensor_micro.Humidity.values[0],
                                        
                                        }


                    metadata_listdict.append(metadata_dict) 

    df_microclimate_data_generation = pd.DataFrame(metadata_listdict)
    
    return df_microclimate_data_generation